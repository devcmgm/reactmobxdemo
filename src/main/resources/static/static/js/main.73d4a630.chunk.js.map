{"version":3,"sources":["pages/Page1.tsx","pages/Page2.tsx","pages/Home.tsx","AppRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Page1","observable","person","name","age","navigator","onLine","this","setAge","action","className","labelText","data","toString","Button","variant","style","color","onClick","props","history","push","alert","React","Component","computed","Page2","Home","AppRouter","exact","path","render","children","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUAoEeA,G,sGA9DVC,K,4QAWDC,OAASD,YACL,CAEIE,KAAM,OACNC,IAAK,GAEL,gBACI,OAAOC,UAAUC,OAAV,UAAsBC,KAAKJ,KAA3B,kBAAyCI,KAAKH,IAA9C,KAAuDG,KAAKJ,MAGvEK,OATJ,SASWJ,GACHG,KAAKH,IAAMA,IAGnB,CACII,OAAQC,M,uDAIN,IAAD,OAEL,OACI,yBAAKC,UAAU,SACX,sDACA,4BAAKH,KAAKL,OAAOS,WACjB,uCAAaJ,KAAKK,KAAKC,WAAvB,KACA,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAO,CAAEC,MAAO,SAChBC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,OAJhC,mBASA,uDACA,kBAACP,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAO,CAAEC,MAAO,SAChBC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,YAJhC,iBASA,0D,2BAhDR,OADAC,MAAM,UAAYjB,UAAUC,OAAS,KAC9BD,UAAUC,W,GALLiB,IAAMC,W,gCAGrBC,K,oEC0BUC,E,uKAhCD,IAAD,OAEL,OACI,yBAAKhB,UAAU,SACX,iDACA,kBAACI,EAAA,EAAD,CACIC,QAAQ,YACRE,MAAM,YACND,MAAO,CAACC,MAAO,SACfC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,OALhC,mBAUA,kBAACP,EAAA,EAAD,CACIC,QAAQ,YACRE,MAAM,YACND,MAAO,CAACC,MAAO,UACfC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,YALhC,oBAWA,4D,GA5BIE,IAAMC,WCkCXG,E,uKAhCD,IAAD,OAEL,OACI,yBAAKjB,UAAU,OACb,oCACE,kBAACI,EAAA,EAAD,CACIC,QAAQ,YACRE,MAAM,YACND,MAAO,CAACC,MAAO,SACfC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,YALhC,UAUA,kBAACP,EAAA,EAAD,CACIC,QAAQ,YACRE,MAAM,UACND,MAAO,CAACC,MAAO,QACfC,QAAS,WACL,EAAKC,MAAMC,QAAQC,KAAK,YALhC,e,GAjBGE,IAAMC,WC8BVI,EA5Ba,SAACT,GACzB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOU,OAAK,EACLC,KAAK,SACLC,OAAQ,SAACZ,GAAD,OACJ,kBAAC,EAAUA,MAGtB,kBAAC,IAAD,CAAOU,OAAK,EACLC,KAAK,SACLC,OAAQ,SAACZ,GAAD,OACJ,kBAAC,EAAUA,MAGtB,kBAAC,IAAD,CAAOU,OAAK,EACLC,KAAK,IACLC,OAAQ,SAACZ,GAAD,OACJ,kBAAC,EAASA,OAIxBA,EAAMa,WCjBJC,MARf,WACE,OACE,yBAAKvB,UAAU,OACf,kBAAC,EAAD,QCKgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73d4a630.chunk.js","sourcesContent":["import React from 'react';\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport { observable, action, computed } from \"mobx\"\n\nclass DataStore {\n    @observable data: any\n}\n\nclass Page1 extends React.Component<RouteComponentProps, DataStore> {\n\n\n    @computed get data() {\n        alert('works:(' + navigator.onLine + ')')\n        return navigator.onLine\n    }\n\n    person = observable(\n        {\n            // observable properties:\n            name: \"John\",\n            age: 42,\n            // computed property:\n            get labelText() {\n                return navigator.onLine ? `${this.name} (age: ${this.age})` : this.name\n            },\n\n            setAge(age: number) {\n                this.age = age\n            }\n        },\n        {\n            setAge: action\n        }\n    )\n\n    render() {\n\n        return (\n            <div className=\"Page1\">\n                <h1>Wecome to Home Page #1</h1>\n                <h2>{this.person.labelText}</h2>\n                <h1>Online:({this.data.toString()})</h1>\n                <Button\n                    variant=\"contained\"\n                    style={{ color: 'green' }}\n                    onClick={() => {\n                        this.props.history.push('/');\n                    }}\n                >\n                    Go To Home Page\n                    </Button>\n                <p>Add Home Page Stuff Here</p>\n                <Button\n                    variant=\"contained\"\n                    style={{ color: 'green' }}\n                    onClick={() => {\n                        this.props.history.push('/page2');\n                    }}\n                >\n                    Go To Page #2\n                    </Button>\n                <p>Add Home Page Stuff Here</p>\n            </div>\n        );\n    }\n}\n\nexport default Page1;\n","import React from 'react';\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Button} from \"@material-ui/core\";\n\nclass Page2 extends React.Component<RouteComponentProps> {\n\n    render() {\n\n        return (\n            <div className=\"Page2\">\n                <h1>Welcome to Page 2</h1>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{color: 'green'}}\n                    onClick={() => {\n                        this.props.history.push('/');\n                    }}\n                >\n                    Go to Home Page\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{color: 'yellow'}}\n                    onClick={() => {\n                        this.props.history.push('/page1');\n                    }}\n                >\n                    Return to Page 1\n                </Button>\n\n                <p>Add Page two stuff here.</p>\n            </div>\n        );\n    }\n}\n\nexport default Page2;\n","import React from 'react';\nimport { RouteComponentProps} from \"react-router-dom\";\nimport {Button} from \"@material-ui/core\";\n\nclass Home extends React.Component<RouteComponentProps> {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n              <h1>Home</h1>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{color: 'green'}}\n                    onClick={() => {\n                        this.props.history.push('/page1');\n                    }}\n                >\n                    Page 1\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{color: 'blue'}}\n                    onClick={() => {\n                        this.props.history.push('/page2');\n                    }}\n                >\n                    Page 2\n                </Button>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport {BrowserRouter, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport Page1 from \"./pages/Page1\";\nimport Page2 from \"./pages/Page2\";\nimport Home from \"./pages/Home\";\n\nconst AppRouter: React.FC = (props ) => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path=\"/page1\"\n                       render={(props: RouteComponentProps) => (\n                           <Page1 {...props} />\n                       )}\n                />\n                <Route exact\n                       path=\"/page2\"\n                       render={(props: RouteComponentProps) => (\n                           <Page2 {...props} />\n                       )}\n                />\n                <Route exact\n                       path=\"/\"\n                       render={(props: RouteComponentProps) => (\n                           <Home {...props} />\n                       )}\n                />\n            </Switch>\n            {props.children}\n        </BrowserRouter>\n    );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport './App.css';\nimport AppRouter from \"./AppRouter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <AppRouter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}